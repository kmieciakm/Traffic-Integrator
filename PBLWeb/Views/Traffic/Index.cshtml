@model TrafficIntensityVM

@{
    ViewData["Title"] = "Index";
}

<h1 class="text-center">Get Traffic</h1>

<hr />
<partial name="_TrafficSearchForm" model="new TrafficSearchVM()" ) />

<hr />
@if (Model != null) {
    <div class="row mx-auto text-white m-3">
        <div class="card-deck mx-auto justify-content-between">
            <div class="card bg-info">
                <div class="card-body text-center">
                    <h2 class="card-title w-100" style="font-size: 2rem;">@Model.CarsAmount</h2>
                    <p class="card-text">@Html.DisplayNameFor(model => model.CarsAmount)</p>
                </div>
            </div>
            <div class="card bg-info">
                <div class="card-body text-center">
                    <h2 class="card-title w-100" style="font-size: 2rem;">@Math.Round(Model.AverageSpeed, 2)</h2>
                    <p class="card-text">@Html.DisplayNameFor(model => model.AverageSpeed)</p>
                </div>
            </div>
        </div>
    </div>

    <div class="m-2">
        @for (int i = 0; i < Model.Cars.Count; i++) {
                var car = Model.Cars.ElementAt(i);
            <i class="fa fa-car car-icon m-1 p-2" aria-hidden="true" type="button" data-toggle="modal" data-target="#carModal@(i)"></i>

            <!-- Modal -->
            <div class="modal fade" id="carModal@(i)" tabindex="-1" role="dialog" aria-labelledby="carModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Car</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <ul class="list-group m-2">
                                <li class="list-group-item list-group-item-success">Localization</li>
                                <li class="list-group-item">Latitude: @car.Localization.Coordinate.Latitude</li>
                                <li class="list-group-item">Longitude: @car.Localization.Coordinate.Longitude</li>
                            </ul>
                            <ul class="list-group m-2">
                                <li class="list-group-item list-group-item-warning">Starting Point</li>
                                <li class="list-group-item">Latitude: @car.StartingPoint.Coordinate.Latitude</li>
                                <li class="list-group-item">Longitude: @car.StartingPoint.Coordinate.Longitude</li>
                            </ul>
                            <ul class="list-group m-2">
                                <li class="list-group-item list-group-item-warning">Ending Point</li>
                                <li class="list-group-item">Latitude: @car.EndingPoint.Coordinate.Latitude</li>
                                <li class="list-group-item">Longitude: @car.EndingPoint.Coordinate.Longitude</li>
                            </ul>
                            <ul class="list-group m-2">
                                <li class="list-group-item list-group-item-info">Speed</li>
                                <li class="list-group-item">Speed: @car.Speed mph</li>
                            </ul>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        function initMap() {
            var options = {
                zoom: 14,
                center: {
                    lat: 51.75216,
                    lng: 19.45282
                }
            }

            // map inside partial view
            var map = new google.maps.Map(document.getElementById('map'), options);
            var markers = [];

            google.maps.event.addListener(map, 'click', event => {
                addMarker({ coords: event.latLng });
            });

            function addMarker(props) {
                clearMarkers();
                var marker = new google.maps.Marker({
                    position: props.coords,
                    map: map,
                });

                let markerLat = marker.position.lat().toFixed(5);
                let markerLng = marker.position.lng().toFixed(5);

                // inputs inside partial view
                document.getElementById("latitude").value = markerLat;
                document.getElementById("longitude").value = markerLng;

                console.log(document.getElementById("latitude"));
                markers.push(marker);
            }

            function clearMarkers() {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(null);
                }
                markers = [];
            }
        }
    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCx8KOGSLQ0HaX4rfESK0TPcIiPuTldVyM&callback=initMap"></script>
}